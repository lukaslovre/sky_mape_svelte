import { get } from "svelte/store";
import { agents } from "../../../stores/store";
import type { FormFieldType, Property } from "../../../types";

export const propertyFormFields: FormFieldType[] = [
  {
    label: "ID",
    inputElement: "input",
    databaseFieldName: "id",
    value: "",
    required: false,
    disabled: true,
    parsingFunction: (value: string) => value,
  },
  {
    label: "Latitude",
    inputElement: "input",
    databaseFieldName: "lat",
    value: "",
    required: false,
    parsingFunction: (value: string) => parseFloat(value),
  },
  {
    label: "Longitude",
    inputElement: "input",
    databaseFieldName: "lng",
    value: "",
    required: false,
    parsingFunction: (value: string) => parseFloat(value),
  },
  {
    label: "Property Type",
    inputElement: "select",
    databaseFieldName: "type",
    value: [],
    required: true,
    options: [
      { value: "House", label: "House" },
      { value: "Apartment", label: "Apartment" },
      { value: "Land", label: "Land" },
      { value: "Commercial", label: "Commercial" },
    ],
    parsingFunction: (value: string[]) => value[0],
  },
  {
    label: "Action",
    inputElement: "select",
    databaseFieldName: "action",
    value: [],
    required: false,
    options: [
      { value: "Sale", label: "Sale" },
      { value: "Rent", label: "Rent" },
    ],
    parsingFunction: (value: string[]) => value[0],
  },
  {
    label: "Image URLs",
    inputElement: "imageInput",
    databaseFieldName: "imgUrl",
    value: "",
    required: false,
    parsingFunction: (value: File) => value,
  },
  {
    label: "Price (€)",
    inputElement: "input",
    databaseFieldName: "price",
    value: "",
    required: false,
    parsingFunction: (value: string) => parseFloat(value),
  },
  {
    label: "Surface Area (m²)",
    inputElement: "input",
    databaseFieldName: "surfaceArea",
    value: "",
    required: false,
    parsingFunction: (value: string) => parseFloat(value),
  },
  {
    label: "Website URL",
    inputElement: "input",
    databaseFieldName: "websiteUrl",
    value: "",
    required: false,
    parsingFunction: (value: string) => value,
  },
  {
    label: "Hidden on Website",
    inputElement: "checkbox",
    databaseFieldName: "hiddenOnWebsite",
    value: false,
    required: false,
    parsingFunction: (value: boolean) => !!value,
  },
  {
    label: "Bedrooms",
    inputElement: "input",
    databaseFieldName: "bedrooms",
    value: "",
    required: false,
    parsingFunction: (value: string) => parseInt(value),
  },
  {
    label: "Bathrooms",
    inputElement: "input",
    databaseFieldName: "bathrooms",
    value: "",
    required: false,
    parsingFunction: (value: string) => parseInt(value),
  },
  {
    label: "Owner",
    inputElement: "select",
    databaseFieldName: "ownerId",
    value: [],
    required: false,
    options: [{ value: "John Doe", label: "John Doe" }], // TODO: It should be fetched from the database
    disabled: false,
    parsingFunction: (value: string[]) => value[0],
  },
  {
    label: "Property Notes",
    inputElement: "textarea",
    databaseFieldName: "propertyNotes",
    value: "",
    required: false,
    parsingFunction: (value: string) => value.trim(),
  },
  {
    label: "Seller Notes",
    inputElement: "textarea",
    databaseFieldName: "sellerNotes",
    value: "",
    required: false,
    parsingFunction: (value: string) => value.trim(),
  },
  {
    label: "Agent",
    inputElement: "select",
    databaseFieldName: "agent_id",
    value: [],
    required: false,
    options: get(agents).map((agent) => ({
      value: agent.id,
      label: agent.name,
    })),
    disabled: false,
    parsingFunction: (value: string[]) => value[0],
  },
  {
    label: "Status",
    inputElement: "select",
    databaseFieldName: "status",
    value: ["available"],
    required: true,
    options: [
      { value: "available", label: "Available" },
      { value: "processing", label: "Processing" },
      { value: "sold", label: "Sold" },
    ],
    parsingFunction: (value: string[]) => value[0],
  },
];
